TITLE: How To Use Vagrant
AUTHOR: Anders Johansen
DATE: today


===== Installation (for all) =====


Download and install "VirtualBox":
"https://www.virtualbox.org/wiki/Downloads". Choose the version
according to the operating system you will build your Vagrant boxes
in.

For example, if you want to build Vagrant boxes under Mac OS X, choose
*VirtualBox x.y.z for OS X hosts*, where `x.y.z` is the version number
of VirtualBox. Double click the downloaded `.dmg` file to install
Vagrant. Those who work on a Windows maching will select *VirtualBox
x.y.z for Windows hosts*, which downloads an `.exe` file that can just
be double clicked.  If Ubuntu 13.04 is your operating system, click on
*Virtual box x.y.z for Linux hosts* and then *Ubuntu 13.04*. A file
`virtualbox-x.y.z.*.deb` (Debian package) is downloaded. Run `sudo
dpkg -i virtualbox-x.y.z.*.deb` to install it.

Download and install "Vagrant": "http://downloads.vagrantup.com/".
Choose the latest version and the installation file corresponding to
the operating system where you installed VirtualBox.  On a Mac, you
select the `Vagrant-x.y.z.dmg` file (`x.y.z` denotes the version of
the software), on Windows the `Vagrant_x.y.z.msi` file is the
relevant choice. On Ubuntu, select `vagrant_x.y.z_*.deb`. See above
for how to install `.dmg`, `.exe`, and `.deb` files.

On Windows and Mac OS X, the `vagrant` command is automatically be
available after installation (because the directory where the
`vagrant` executable resides is placed in your `PATH` environment
variable). This is true for many Linux systems too, otherwise you must
add the relevant directory where the `vagrant` program was installed
(say `/opt/vagrant/bin`) to your `PATH` variable.


===== For administrators =====

__Step 1.__
The file that controls the VM setup is named Vagrantfile and is written in Ruby. The file is automatically created by the command

!bc sys
$ vagrant init
!ec

__Step 2.__
The Vagrantfile must be edited to fit our use. For example, do we perhaps want an LTS version to build off of, to enable X11 forwarding, install packages and share folders between our own system and the VM. A Vagrantfile for the use in INF1100 could look like this:

!bc
    # -*- mode: ruby -*-
    # vi: set ft=ruby :

    Vagrant::Config.run do |config|
      # Every Vagrant virtual environment requires a box to build off of.
      config.vm.box = "precise32"

      # The url from where the 'config.vm.box' box will be fetched if it
      # doesn't already exist on the user's system.
      config.vm.box_url = "http://files.vagrantup.com/precise32.box"

      # Enable X11 forwarding
      config.ssh.forward_x11 = true

      # Share an additional folder to the guest VM. The first argument is
      # an identifier, the second is the path on the guest to mount the
      # folder, and the third is the path on the host to the actual folder.
      config.vm.share_folder "1100", "~/INF1100", "./INF1100"
      config.vm.share_folder "5620", "~/INF5620", "./INF5620"

      # Shell commands run at first startup of the VM
      config.vm.provision :shell, :inline => "apt-get update && apt-get -y install python-matplotlib python-scitools"

    end
!ec

__Step 3.__
Make sure the layout described in the Vagrantfile matches your own layout. I.e., in this case we should have a folder named INF1100 and another named INF5620.

__Step 4.__
Distribute this to all users.


===== For users =====

__Step 1.__
Run the following command to download and start the virtual machine

!bc sys
$ vagrant up
!ec

__Step 2.__
After the installation completes one can use the virtual environment by

!bc sys
$ vagrant ssh
!ec

Now the user has a terminal window where everything works. This is practically it, but Step 3 contains very useful information.


__Step 3.__
Normally, when taking a course, the student could just exit from the VM by CTRL+D or closing the terminal. The virtual environment would immediately be up running again next time by a new

!bc sys
$ vagrant up
$ vagrant ssh
!ec

A faster, better and safer option is to suspend the virtual machine by running

!bc sys
$ vagrant suspend
!ec
This will save the current running state of your virtual machine and then stop it. To resume working again at some other time, simply issue a vagrant resume to get going!

The main benefit of this is that resuming your work again is quick, a matter of maybe 10 to 15 seconds. The cost is that your disk space is still consumed by the virtual machine. An average virtual machine takes up about 1 GB of disk space.

Another option is to halt the virtual machine by running

!bc sys
$ vagrant halt
!ec

This will attempt a graceful shutdown of your VM (such as issuing a halt in a linux machine) and wait for it to shut down. To resume working again, issue a vagrant up, which will reboot the machine but will not repeat the import sequence (since it is already imported).

The main benefit of this is it allows you to cleanly shut down your VM, and allow it from a cold state again. The cost is that you still pay for the disk space that is consumed by the virtual machine.

Finally, you can completely destroy the virtual environment. This can be done by running

!bc sys
$ vagrant destroy
!ec

which will literally delete all traces of the virtual environment off the disk. To get started again, run vagrant up and your environment will be rebuilt.

The benefit of this is that your disk space is completely restored to pre-VM state, saving you about 1 GB on average. The cost is that you must wait for a full rebuild when you vagrant up again.

Typically you would not destroy the environment of an active project, unless disk space is really at a premium. Instead, most users choose to suspend or halt their projects instead.
