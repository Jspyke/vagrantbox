"Docker": "http://www.docker.com/" is a tool for packaging applications
with all their dependencies such that the applications can be run
on ``any'' computing platform. Docker differs from a normal virtual
machine in that "it does not include a full guest operating system": "http://www.docker.com/whatisdocker/".

A Docker Linux container must be run on a Linux host, which can be
Vagrant or a Linux Virtual Machine.

Readings:

 o "Understanding Docker": "https://docs.docker.com/introduction/understanding-docker/".
 o "Installing Docker": "https://docs.docker.com/installation/#installation".
   Scientists will often prefer to" work with Docker on Ubuntu": "https://docs.docker.com/installation/ubuntulinux/".
 o "The Docker User Guide": "https://docs.docker.com/userguide/".

======= Instructions from OpenDreamKit =======

"Slides": "https://github.com/OpenDreamKit/OpenDreamKit.github.io/blob/master/meetings/2015-09-02-Kickoff/docker.md"

!bc
On ubuntu, as root (docker wants to be root initially)

1) there is an app called docker which is not the docker we want

apt-get remove docker

2) we need to install docker

apt-get install -y docker.io

3) next we need to fetch a container (actually many containers)
The 28a945b4333c container is Ubuntu 12.04

docker pull 28a945b4333c

4) see what images you have

docker images

5) select one of them. I chose ubuntu 12.04 since that version
has worked well in the past for me. The exact image can be
selected using the IMAGE ID column.

7) make a working directory. Files in this directory will be available
during the docker build step.

mkdir /root/docker

6) make a tar image which would be the subtree you would
get from an installed version of your program. Axiom installs are
in /usr/local/axiom so I did

cd /usr/local
tar -zcf /root/docker/axiom.tgz axiom

7) copy your shell script to /root/docker

cd /root/docker
cp /usr/local/bin/axiom .

8) make a Dockerfile file

emacs -nw Dockerfile

9) add a set of docker commands (by convention they are uppercase)

# ubuntu 12.04
FROM 28a945b4333c
MAINTAINER Tim Daly daly@axiom-developer.org
# update the image to the latest repos
RUN apt-get update
# for X11 connections to hyperdoc
RUN apt-get install -y libxpm-dev gcc vi
# untar the program into the image at /usr/local
ADD axiom.tgz /usr/local
# put the command in the path
ADD axiom /usr/local/bin
# make the axiom command executable by everyone
RUN chmod a+x /usr/local/bin/axiom

9) save the Dockerfile (note that case is important)

10) run the docker build

cd /root/docker
docker build .

11) find out the ID of the latest image you just made, which is
the hash code under CONTAINER ID

docker ps -l

CONTAINER ID
12345abcde

12) commit the container with all of the changes (Note that
doing anything with the container interatively will lose
changes you don't commit)

docker commit 12345abcde daly/axiom

13) check that you now have a new image

docker images

14) create a userid on the docker hub.docker.com (e.g. daly)

15) push the daly/axiom image to the hub

docker login
docker push daly/axiom

The whole process should take about 1 hour. Some more details....

3) next we need to fetch a container (actually many containers)

docker pull ubuntu

If you know the IMAGE ID you don't have to do the pull
because the docker build command will do it for you.

5) select one of them. I chose ubuntu 12.04 since that version
has worked well in the past for me. The exact image can be
selected using the IMAGE ID column.

The key advantage of Docker is that you can isolate yourself
from the underlying operating system. I chose ubuntu 12.04
because that's the opsys on my master machine.

7) make a working directory. Files in this directory will be available
during the docker build step.

mkdir /root/docker

Be careful what you put in this directory. The whole directory
will be cloned so the build process can import files. You don't
want to import sensitive information.

6) make a tar image which would be the subtree you would
get from an installed version of your program. Axiom installs are
in /usr/local/axiom so I did

cd /usr/local
tar -zcf /root/docker/axiom.tgz axiom

The docker build process knows to untar/decompress tgz files
so this will be decompressed automatically

9) add a set of docker commands (by convention they are uppercase)

The docker build runs by starting the image and then executing
the commands from the Dockerfile in the image. The files in
the named subdirectory are directly accessed so make sure you
copy what you need to a subdirectory (which I called docker)

Note that I used the exact IMAGE ID I wanted (ubuntu 12.04)
docker will fetch that image if it is not locally available.
# ubuntu 12.04
FROM 28a945b4333c

MAINTAINER Tim Daly daly@axiom-developer.org

If you need to install anything you can use the RUN command
which executes command line functions.
# update the image to the latest repos
RUN apt-get update

You should specify the "-y" (yes) switch since there is no
console interaction available
# for X11 connections to hyperdoc
RUN apt-get install -y libxpm-dev

docker knows how to unpack several file formats automatically
into the location of the second argument
# untar axiom into the image at /usr/local
ADD axiom.tgz /usr/local

and it knows how to copy files to the second argument
# put the command in the path
ADD axiom /usr/local/bin

# make the command executable by everyone
RUN chmod a+x /usr/local/bin/axiom

10) run the docker build

cd /root/docker
docker build .

docker build is going to use the files in the named directory (.)
to modify the original image (ubuntu) to make a new image.

12) commit the container with all of the changes (Note that
doing anything with the container interatively will lose
changes you don't commit)

docker commit 12345abcde daly/axiom

note that the image name "daly/axiom" should have your docker
hub userid (daly) as the first element

You can run the new image to test it. Note that any changes
you make to the image will not be saved unless you do a commit.
Commands that need I/O (such as bash) need the -i -t switches to
give them stdio. To test your new image do:

docker run -i -t daly/axiom axiom
!ec

======= FEniCS =======

!bc
Thanks for this, it's really great! Actually Garth and I had exactly
>>  the same idea and we have begun development on a branch here:
>>
>>
>> https://bitbucket.org/garth-wells/fenics-virtual/src/8f25457e2be23b74d29dbdd97aa292d6af7df082/?at=vagrant-docker
>>
>>  We are supporting vagrant with both virtualbox and docker providers.
>>
>>  Perhaps we could join efforts at this point? I think we are perhaps
>> a
>>  little ahead on the vagrant/virtualbox approach, whilst you seem to
>>  have the manual source builds sorted. Also our docs are more
>> detailed.
>>  Together I think we could work towards a really complete approach.
>>
>>  What I think would be good:
>>
>>  We could use the docker.io 'trusted build' facilities to generate
>> the
>>  docker images from a Dockerfile hosted on a repository in bitbucket.
>>  Then the images would automatically appear on docker.io. Three
>> images
>>  might be suitable:
>>
>>  1) FEniCS stable from Ubuntu PPA.
>>  2) FEniCS nightly built using Dorsal.
>>  3) FEniCS stable built using Dorsal.
>>
>>  Then the Vagrant script will pull the correct image based on an
>>  environment variable (see my example).
>>
>>  Also I have had great success using
>>  https://github.com/phusion/baseimage-docker as the base image for
>>  docker. Could we standardise on this base-image? It has many
>>  advantages over the default ubunty base image in that it acts more
>>  like a 'proper' ubuntu system with init etc.
>>
>>  Long-term after sufficient testing we make vagrant the official way
>> of
>>  installing FEniCS on all non-Ubuntu platforms.
>
> Agree on this. Great to see both efforts in this direction.
>
> I would suggest at this point moving everything to a new official
> fenics-project repo. No need to wait to make this the official
> installation method. The installation seems to work fine and by
> promoting it to the official installation method, you will get better
> and faster user feedback. I would guess it is already more foolproof
> than Dorsal and it will contribute to removing a large percentage of
> installation issues/questions.
!ec
